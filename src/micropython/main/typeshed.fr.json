{
  "files": {
    "/typeshed/stdlib/VERSIONS": "# The structure of this file is as follows:\n# - Blank lines and comments starting with `#` are ignored.\n# - Lines contain the name of a module, followed by a colon,\n#   a space, and a version range (for example: `symbol: 2.7-3.9`).\n#\n# Version ranges may be of the form \"X.Y-A.B\" or \"X.Y-\". The\n# first form means that a module was introduced in version X.Y and last\n# available in version A.B. The second form means that the module was\n# introduced in version X.Y and is still available in the latest\n# version of Python.\n#\n# If a submodule is not listed separately, it has the same lifetime as\n# its parent module.\n#\n# Python versions before 2.7 are ignored, so any module that was already\n# present in 2.7 will have \"2.7\" as its minimum version. Version ranges\n# for unsupported versions of Python 3 (currently 3.5 and lower) are\n# generally accurate but we do not guarantee their correctness.\n\nantigravity: 3.0-\narray: 3.0-\naudio: 3.0-\nbuiltins: 3.0-\nerrno: 3.0-\ngc: 3.0-\nlove: 3.0-\nmachine: 3.0-\nmath: 3.0-\nmicrobit: 3.0-\nmicropython: 3.0-\nmusic: 3.0-\nneopixel: 3.0-\nos: 3.0-\nradio: 3.0-\nrandom: 3.0-\nspeech: 3.0-\nstruct: 3.0-\nsys: 3.0-\nthis: 3.0-\ntime: 3.0-\ntyping_extensions: 3.0-\ntyping: 3.0-\nuarray: 3.0-\nucollections: 3.0-\nuerrno: 3.0-\nuos: 3.0-\nurandom: 3.0-\nustruct: 3.0-\nusys: 3.0-\nutime: 3.0-",
    "/typeshed/stdlib/abc.pyi": "",
    "/typeshed/stdlib/array.pyi": "",
    "/typeshed/stdlib/audio.pyi": "\"\"\"Play sounds using the micro:bit (import ``audio`` for V1 compatibility).\n\"\"\"\n\n# Re-export for V1 compatibility.\nfrom .microbit.audio import (\n    is_playing as is_playing,\n    play as play,\n    stop as stop,\n    AudioFrame as AudioFrame,\n    SoundEffect as SoundEffect,\n)\n",
    "/typeshed/stdlib/builtins.pyi": "",
    "/typeshed/stdlib/errno.pyi": "",
    "/typeshed/stdlib/gc.pyi": "",
    "/typeshed/stdlib/log.pyi": "",
    "/typeshed/stdlib/love.pyi": "",
    "/typeshed/stdlib/machine.pyi": "\"\"\"Utilitaires bas niveau\"\"\"\nfrom typing import Any\nfrom .calliope import MicroBitDigitalPin\n\ndef unique_id() -> bytes:\n    \"\"\"R\u00e9cup\u00e8re une cha\u00eene d'octets repr\u00e9sentant un identifiant unique d'une carte.\n\nExample: ``machine.unique_id()``\n\n:return: An identifier that varies from one board instance to another.\"\"\"\n    ...\n\ndef reset() -> None:\n    \"\"\"R\u00e9initialise l'appareil d'une mani\u00e8re similaire \u00e0 la pression sur le bouton RESET externe.\n\nExample: ``machine.reset()``\"\"\"\n    ...\n\ndef freq() -> int:\n    \"\"\"R\u00e9cup\u00e8re la fr\u00e9quence du CPU en hertz.\n\nExample: ``machine.freq()``\n\n:return: The CPU frequency.\"\"\"\n    ...\n\ndef disable_irq() -> Any:\n    \"\"\"D\u00e9sactiver les demandes d'interruption.\n\nExample: ``interrupt_state = machine.disable_irq()``\n\n:return: the previous IRQ state which should be considered an opaque value\n\nThe return value should be passed to the ``enable_irq`` function to restore\ninterrupts to their original state.\"\"\"\n    ...\n\ndef enable_irq(state: Any) -> None:\n    \"\"\"R\u00e9activer les demandes d'interruption.\n\nExample: ``machine.enable_irq(interrupt_state)``\n\n:param state: La valeur qui a \u00e9t\u00e9 renvoy\u00e9e par l'appel le plus r\u00e9cent \u00e0 la fonction ``disable_irq``.\"\"\"\n    ...\n\ndef time_pulse_us(pin: MicroBitDigitalPin, pulse_level: int, timeout_us: int=1000000) -> int:\n    \"\"\"Chronom\u00e9trer une impulsion sur une broche.\n\nExample: ``time_pulse_us(pin0, 1)``\n\nIf the current input value of the pin is different to ``pulse_level``, the\nfunction first waits until the pin input becomes equal to\n``pulse_level``, then times the duration that the pin is equal to\n``pulse_level``. If the pin is already equal to ``pulse_level`` then timing\nstarts straight away.\n\n:param pin: (broche) La broche \u00e0 utiliser\n:param pulse_level: 0 pour chronom\u00e9trer une impulsion basse ou 1 pour chronom\u00e9trer une impulsion haute.\n:param timeout_us: Un d\u00e9lai d'attente en microseconde\n:return: The duration of the pulse in microseconds, or -1 for a timeout waiting for the level to match ``pulse_level``, or -2 on timeout waiting for the pulse to end\"\"\"\n    ...\n\nclass mem:\n    \"\"\"La classe pour les vues m\u00e9moire ``mem8``, ``mem16`` et ``mem32``.\"\"\"\n\n    def __getitem__(self, address: int) -> int:\n        \"\"\"Acc\u00e9der \u00e0 une valeur dans la m\u00e9moire.\n\n:param address: L'adresse en m\u00e9moire.\n:return: The value at that address as an integer.\"\"\"\n        ...\n\n    def __setitem__(self, address: int, value: int) -> None:\n        \"\"\"\u00c9crire une valeur \u00e0 une adresse donn\u00e9e.\n\n:param address: L'adresse en m\u00e9moire.\n:param value: La valeur enti\u00e8re \u00e0 \u00e9crire.\"\"\"\n        ...\nmem8: mem\n\"\"\"Vue de la m\u00e9moire au format 8-bit (octet).\"\"\"\nmem16: mem\n\"\"\"Vue de la m\u00e9moire au format 16-bit.\"\"\"\nmem32: mem\n\"\"\"Vue de la m\u00e9moire au format 32-bit.\"\"\"",
    "/typeshed/stdlib/math.pyi": "",
    "/typeshed/stdlib/micropython.pyi": "",
    "/typeshed/stdlib/music.pyi": "\"\"\"Cr\u00e9er et jouer des m\u00e9lodies.\"\"\"\nfrom typing import Optional, Tuple, Union, List\nfrom .calliope import MicroBitDigitalPin, pin0\nDADADADUM: Tuple[str, ...]\n\"\"\"M\u00e9lodie : l'ouverture de la 5e symphonie en do mineur de Beethoven.\"\"\"\nENTERTAINER: Tuple[str, ...]\n\"\"\"M\u00e9lodie : le fragment d'ouverture du classique de ragtime \"The Entertainer\" de Scott Joplin.\"\"\"\nPRELUDE: Tuple[str, ...]\n\"\"\"M\u00e9lodie : le pr\u00e9lude et fugue en ut majeur (BWV 846) de Jean-S\u00e9bastien Bach.\"\"\"\nODE: Tuple[str, ...]\n\"\"\"M\u00e9lodie : le th\u00e8me de l'\"Ode \u00e0 la joie\" de la 9e symphonie en r\u00e9 mineur de Beethoven.\"\"\"\nNYAN: Tuple[str, ...]\n\"\"\"M\u00e9lodie : le th\u00e8me de Nyan Cat (http://www.nyan.cat/).\n\nThe composer is unknown. This is fair use for educational porpoises (as they say in New York).\"\"\"\nRINGTONE: Tuple[str, ...]\n\"\"\"M\u00e9lodie : son qui ressemble \u00e0 une sonnerie de t\u00e9l\u00e9phone mobile.\n\nTo be used to indicate an incoming message.\n\"\"\"\nFUNK: Tuple[str, ...]\n\"\"\"M\u00e9lodie : une ligne de basse funky pour les agents secrets et les cerveaux criminels.\"\"\"\nBLUES: Tuple[str, ...]\n\"\"\"M\u00e9lodie : une walking bass blues de boogie-woogie \u00e0 12 mesures.\"\"\"\nBIRTHDAY: Tuple[str, ...]\n\"\"\"M\u00e9lodie : \u00ab Joyeux anniversaire\u2026\u00bb\n\nFor copyright status see: http://www.bbc.co.uk/news/world-us-canada-34332853\n\"\"\"\nWEDDING: Tuple[str, ...]\n\"\"\"M\u00e9lodie : la marche nuptiale de l'op\u00e9ra \"Lohengrin\" de Wagner.\"\"\"\nFUNERAL: Tuple[str, ...]\n\"\"\"M\u00e9lodie : la \"marche fun\u00e8bre \" aussi connue sous le nom de Sonate pour piano n\u00b0 2 en B\u266d mineur, opus 35 de Fr\u00e9d\u00e9ric Chopin.\"\"\"\nPUNCHLINE: Tuple[str, ...]\n\"\"\"M\u00e9lodie : un extrait amusant qui signifie qu'une blague a \u00e9t\u00e9 faite.\"\"\"\nPYTHON: Tuple[str, ...]\n\"\"\"M\u00e9lodie : La marche \"Liberty Bell\" de John Philip Sousa, alias le th\u00e8me du \"Monty Python's Flying Circus\" (qui a donn\u00e9 son nom au langage de programmation Python).\"\"\"\nBADDY: Tuple[str, ...]\n\"\"\"M\u00e9lodie\\xa0: entr\u00e9e d'un m\u00e9chant \u00e0 l'\u00e9poque des films muets.\"\"\"\nCHASE: Tuple[str, ...]\n\"\"\"M\u00e9lodie : sc\u00e8ne de poursuite \u00e0 l'\u00e9poque du film muet.\"\"\"\nBA_DING: Tuple[str, ...]\n\"\"\"M\u00e9lodie : un signal court pour indiquer que quelque chose s'est produit.\"\"\"\nWAWAWAWAA: Tuple[str, ...]\n\"\"\"M\u00e9lodie : un trombone tr\u00e8s triste.\"\"\"\nJUMP_UP: Tuple[str, ...]\n\"\"\"M\u00e9lodie\\xa0: pour une utilisation dans un jeu, indiquant un mouvement vers le haut.\"\"\"\nJUMP_DOWN: Tuple[str, ...]\n\"\"\"M\u00e9lodie\\xa0: pour une utilisation dans un jeu, indiquant un mouvement vers le bas.\"\"\"\nPOWER_UP: Tuple[str, ...]\n\"\"\"M\u00e9lodie : une fanfare pour indiquer un succ\u00e8s d\u00e9bloqu\u00e9.\"\"\"\nPOWER_DOWN: Tuple[str, ...]\n\"\"\"M\u00e9lodie : une fanfare triste pour indiquer un succ\u00e8s manqu\u00e9.\"\"\"\n\ndef set_tempo(ticks: int=4, bpm: int=120) -> None:\n    \"\"\"D\u00e9finir le tempo approximatif pour la lecture.\n\nExample: ``music.set_tempo(bpm=120)``\n\n:param ticks: Le nombre de ticks constituant un battement.\n:param bpm: Un entier d\u00e9terminant le nombre de battements par minute.\n\nSuggested default values allow the following useful behaviour:\n\n- music.set_tempo() \u2013 reset the tempo to default of ticks = 4, bpm = 120\n- music.set_tempo(ticks=8) \u2013 change the \u201cdefinition\u201d of a beat\n- music.set_tempo(bpm=180) \u2013 just change the tempo\n\nTo work out the length of a tick in milliseconds is very simple arithmetic:\n60000/bpm/ticks_per_beat. For the default values that\u2019s\n60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.\"\"\"\n    ...\n\ndef get_tempo() -> Tuple[int, int]:\n    \"\"\"R\u00e9cup\u00e9rer le tempo actuel sous la forme d'un tuple d'entiers : ``(ticks, bpm)``.\n\nExample: ``ticks, beats = music.get_tempo()``\n\n:return: The temp as a tuple with two integer values, the ticks then the beats per minute.\"\"\"\n    ...\n\ndef play(music: Union[str, List[str], Tuple[str, ...]], pin: Optional[MicroBitDigitalPin]=pin0, wait: bool=True, loop: bool=False) -> None:\n    \"\"\"Jouer de la musique.\n\nExample: ``music.play(music.NYAN)``\n\n:param music: musique sp\u00e9cifi\u00e9e dans `une notation sp\u00e9ciale <https://microbit-micropython.readthedocs.io/en/v2-docs/music.html#musical-notation>`_\n:param pin: (broche) la broche de sortie \u00e0 utiliser avec un haut-parleur externe (par d\u00e9faut ``pin0``), ``None`` pour aucun son.\n:param wait: Si ``wait`` est d\u00e9fini \u00e0 ``True``, cette fonction est bloquante.\n:param loop: Si ``loop`` est d\u00e9fini \u00e0 ``True``, la m\u00e9lodie se r\u00e9p\u00e8te jusqu'\u00e0 ce que ``stop`` soit appel\u00e9, ou que l'appel bloquant soit interrompu.\n\nMany built-in melodies are defined in this module.\"\"\"\n    ...\n\ndef pitch(frequency: int, duration: int=-1, pin: Optional[MicroBitDigitalPin]=pin0, wait: bool=True) -> None:\n    \"\"\"Jouer une note. (tangage)\n\nExample: ``music.pitch(185, 1000)``\n\n:param frequency: (fr\u00e9quence) Une fr\u00e9quence enti\u00e8re\n:param duration: Une dur\u00e9e en milliseconde. Si la valeur est n\u00e9gative alors le son sera continu jusqu'au prochain appel, ou jusqu'\u00e0 un appel \u00e0 ``stop``.\n:param pin: (broche) Broche de sortie optionnelle (par d\u00e9faut ``pin0``).\n:param wait: Si ``wait`` est d\u00e9fini \u00e0 ``True``, cette fonction est bloquante.\n\nFor example, if the frequency is set to 440 and the length to\n1000 then we hear a standard concert A for one second.\n\nYou can only play one pitch on one pin at any one time.\"\"\"\n    ...\n\ndef stop(pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"Met fin \u00e0 toute lecture de musique sur le haut-parleur int\u00e9gr\u00e9 et \u00e0 tout son en sortie sur la broche.\n\nExample: ``music.stop()``\n\n:param pin: (broche) Un argument optionnel peut \u00eatre sp\u00e9cifi\u00e9 pour indiquer une broche, par exemple ``music.stop(pin1)``.\"\"\"\n\ndef reset() -> None:\n    \"\"\"R\u00e9initialiser les ticks, bpm, dur\u00e9e et octave \u00e0 leurs valeurs par d\u00e9faut.\n\nExample: ``music.reset()``\n\nValues:\n- ``ticks = 4``\n- ``bpm = 120``\n- ``duration = 4``\n- ``octave = 4``\"\"\"\n    ...",
    "/typeshed/stdlib/neopixel.pyi": "\"\"\"Bandes LED RGB et RGBW individuellement adressables.\"\"\"\nfrom .calliope import MicroBitDigitalPin\nfrom typing import Tuple\n\nclass NeoPixel:\n\n    def __init__(self, pin: MicroBitDigitalPin, n: int, bpp: int=3) -> None:\n        \"\"\"Initialiser une nouvelle bande de LEDs neopixel contr\u00f4l\u00e9e via une broche.\n\nExample: ``np = neopixel.NeoPixel(pin0, 8)``\n\nTo support RGBW neopixels, a third argument can be passed to\n``NeoPixel`` to indicate the number of bytes per pixel (``bpp``).\nFor RGBW, this is is 4 rather than the default of 3 for RGB and GRB.\n\nEach pixel is addressed by a position (starting from 0). Neopixels are\ngiven RGB (red, green, blue) / RGBW (red, green, blue, white) values\nbetween 0-255 as a tuple. For example, in RGB, ``(255,255,255)`` is\nwhite. In RGBW, ``(255,255,255,0)`` or ``(0,0,0,255)`` is white.\n\nSee `the online docs <https://microbit-micropython.readthedocs.io/en/v2-docs/neopixel.html>`_ for warnings and other advice.\n\n:param pin: (broche) La broche qui contr\u00f4le la bande neopixel.\n:param n: Le nombre de neopixels sur la bande.\n:param bpp: Octets par pixel. Pour le support du neopixel RGBW microbit V2, passez 4 plut\u00f4t que la valeur par d\u00e9faut de 3 pour RGB et GRB.\"\"\"\n        ...\n\n    def clear(self) -> None:\n        \"\"\"Effacer tous les pixels.\n\nExample: ``np.clear()``\"\"\"\n        ...\n\n    def show(self) -> None:\n        \"\"\"Afficher les pixels.\n\nExample: ``np.show()``\n\nMust be called for any updates to become visible.\"\"\"\n        ...\n\n    def write(self) -> None:\n        \"\"\"Afficher les pixels (micro:bit V2 uniquement).\n\nExample: ``np.write()``\n\nMust be called for any updates to become visible.\n\nEquivalent to ``show``.\"\"\"\n        ...\n\n    def fill(self, colour: Tuple[int, ...]) -> None:\n        \"\"\"Colorer tous les pixels d'une valeur RGB/RGBW donn\u00e9e.\n\nExample: ``np.fill((0, 0, 255))``\n\n:param colour: Un tuple de la m\u00eame longueur que le nombre d'octets par pixel (bpp).\n\nUse in conjunction with ``show()`` to update the neopixels.\"\"\"\n        ...\n\n    def __setitem__(self, key: int, value: Tuple[int, ...]) -> None:\n        \"\"\"D\u00e9finit une couleur de pixel.\n\nExample: ``np[0] = (255, 0, 0)``\n\n:param key: Le num\u00e9ro du pixel\n:param value: La couleur.\"\"\"\n\n    def __getitem__(self, key: int) -> Tuple[int, ...]:\n        \"\"\"R\u00e9cup\u00e8re la couleur d'un pixel\n\nExample: ``r, g, b = np[0]``\n\n:param key: Le num\u00e9ro du pixel\n:return: The colour tuple.\"\"\"\n\n    def __len__(self) -> int:\n        \"\"\"R\u00e9cup\u00e8re la longueur de cette bande de pixels.\n\nExample: ``len(np)``\"\"\"",
    "/typeshed/stdlib/os.pyi": "",
    "/typeshed/stdlib/power.pyi": "\"\"\"Manage the power modes of the micro:bit (V2 only).\n\"\"\"\n\nfrom microbit import MicroBitDigitalPin, Button\nfrom typing import Optional, Tuple, Union\n\ndef off() -> None:\n    \"\"\"Power down the board to the lowest possible power mode.\n\n    Example: ``power.off()``\n\n    This is the equivalent to pressing the reset button for a few seconds,\n    to set the board in \"Off mode\".\n\n    The micro:bit will only wake up if the reset button is pressed or,\n    if on battery power, when a USB cable is connected.\n\n    When the board wakes up it will start for a reset state, so your program\n    will start running from the beginning.\n    \"\"\"\n    ...\n\ndef deep_sleep(\n    ms: Optional[int] = None,\n    wake_on: Optional[\n        Union[MicroBitDigitalPin, Button] | Tuple[MicroBitDigitalPin | Button, ...]\n    ] = None,\n    run_every: bool = True,\n) -> None:\n    \"\"\"Set the micro:bit into a low power mode where it can wake up and continue operation.\n\n    Example: ``power.deep_sleep(wake_on=(button_a, button_b))``\n\n    The program state is preserved and when it wakes up it will resume\n    operation where it left off.\n\n    Deep Sleep mode will consume more battery power than Off mode.\n\n    The wake up sources are configured via arguments.\n\n    The board will always wake up when receiving UART data, when the reset\n    button is pressed (which resets the board) or, in battery power,\n    when the USB cable is inserted.\n\n    When the ``run_every`` parameter is set to ``True`` (the default), any\n    function scheduled with ``run_every`` will momentarily wake up the board\n    to run and when it finishes it will go back to sleep.\n\n    :param ms: A time in milliseconds to wait before it wakes up.\n    :param wake_on: A single instance or a tuple of pins and/or buttons to wake up the board, e.g. ``deep_sleep(wake_on=button_a)`` or ``deep_sleep(wake_on=(pin0, pin2, button_b))``.\n    :param run_every: A boolean to configure if the functions scheduled with ``microbit.run_every`` will continue to run while it sleeps.\n    \"\"\"\n    ...\n",
    "/typeshed/stdlib/radio.pyi": "",
    "/typeshed/stdlib/random.pyi": "",
    "/typeshed/stdlib/speech.pyi": "\"\"\"Faites parler ou chanter le micro:bit, ainsi que d'autres sons li\u00e9s \u00e0 la parole.\"\"\"\nfrom typing import Optional\nfrom .calliope import MicroBitDigitalPin, pin0\n\ndef translate(words: str) -> str:\n    \"\"\"Traduire les mots anglais en phon\u00e8mes.\n\nExample: ``speech.translate('hello world')``\n\n:param words: Une cha\u00eene de caract\u00e8res de mots anglais.\n:return: A string containing a best guess at the appropriate phonemes to pronounce.\nThe output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_.\n\nThis function should be used to generate a first approximation of phonemes\nthat can be further hand-edited to improve accuracy, inflection and\nemphasis.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef pronounce(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"Prononcer les phon\u00e8mes.\n\nExample: ``speech.pronounce(' /HEHLOW WERLD')``\n\n:param phonemes: La cha\u00eene de phon\u00e8mes \u00e0 prononcer\n:param pitch: (tangage) Un nombre repr\u00e9sentant le ton de la voix\n:param speed: Un nombre repr\u00e9sentant la vitesse de la voix\n:param mouth: Un nombre repr\u00e9sentant la bouche de la voix\n:param throat: Un nombre repr\u00e9sentant la gorge de la voix\n:param pin: (broche) Argument optionnel pour sp\u00e9cifier la broche de sortie. Peut \u00eatre utilis\u00e9 pour remplacer la valeur par d\u00e9faut de ``pin0``.\nPour emp\u00eacher l'\u00e9mission d'un son via les broches, il est possible d'utiliser ``pin=None``. micro:bit V2 seulement.\n\nOverride the optional pitch, speed, mouth and throat settings to change the\ntimbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef say(words: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Dire des mots anglais.\n\nExample: ``speech.say('hello world')``\n\n:param words: La cha\u00eene de mots \u00e0 dire.\n:param pitch: (tangage) Un nombre repr\u00e9sentant le ton de la voix\n:param speed: Un nombre repr\u00e9sentant la vitesse de la voix\n:param mouth: Un nombre repr\u00e9sentant la bouche de la voix\n:param throat: Un nombre repr\u00e9sentant la gorge de la voix\n:param pin: (broche) Argument optionnel pour sp\u00e9cifier la broche de sortie. Peut \u00eatre utilis\u00e9 pour remplacer la valeur par d\u00e9faut de ``pin0``.\nPour emp\u00eacher l'\u00e9mission d'un son via les broches, il est possible d'utiliser ``pin=None``. micro:bit V2 seulement.\n\nThe result is semi-accurate for English. Override the optional pitch, speed,\nmouth and throat settings to change the timbre (quality) of the voice.\n\nThis is a short-hand equivalent of:\n``speech.pronounce(speech.translate(words))``\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef sing(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Chanter des phon\u00e8mes.\n\nExample: ``speech.sing(' /HEHLOW WERLD')``\n\n:param phonemes: La cha\u00eene de mots \u00e0 chanter.\n:param pitch: (tangage) Un nombre repr\u00e9sentant le ton de la voix\n:param speed: Un nombre repr\u00e9sentant la vitesse de la voix\n:param mouth: Un nombre repr\u00e9sentant la bouche de la voix\n:param throat: Un nombre repr\u00e9sentant la gorge de la voix\n:param pin: (broche) Argument optionnel pour sp\u00e9cifier la broche de sortie. Peut \u00eatre utilis\u00e9 pour remplacer la valeur par d\u00e9faut de ``pin0``.\nPour emp\u00eacher l'\u00e9mission d'un son via les broches, il est possible d'utiliser ``pin=None``. micro:bit V2 seulement.\n\nOverride the optional pitch, speed, mouth and throat settings to change\nthe timbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...",
    "/typeshed/stdlib/struct.pyi": "",
    "/typeshed/stdlib/sys.pyi": "",
    "/typeshed/stdlib/this.pyi": "",
    "/typeshed/stdlib/time.pyi": "",
    "/typeshed/stdlib/types.pyi": "",
    "/typeshed/stdlib/typing.pyi": "",
    "/typeshed/stdlib/typing_extensions.pyi": "",
    "/typeshed/stdlib/uarray.pyi": "",
    "/typeshed/stdlib/ucollections.pyi": "",
    "/typeshed/stdlib/uerrno.pyi": "",
    "/typeshed/stdlib/urandom.pyi": "",
    "/typeshed/stdlib/ustruct.pyi": "",
    "/typeshed/stdlib/usys.pyi": "",
    "/typeshed/stdlib/utime.pyi": "",
    "/typeshed/stdlib/calliopemini/__init__.pyi": "",
    "/typeshed/stdlib/calliopemini/accelerometer.pyi": "",
    "/typeshed/stdlib/calliopemini/audio.pyi": "",
    "/typeshed/stdlib/calliopemini/compass.pyi": "",
    "/typeshed/stdlib/calliopemini/display.pyi": "",
    "/typeshed/stdlib/calliopemini/i2c.pyi": "",
    "/typeshed/stdlib/calliopemini/microphone.pyi": "",
    "/typeshed/stdlib/calliopemini/speaker.pyi": "",
    "/typeshed/stdlib/calliopemini/spi.pyi": "",
    "/typeshed/stdlib/calliopemini/uart.pyi": "",
    "/typeshed/stdlib/_typeshed/__init__.pyi": "",
    "/typeshed/stdlib/collections/__init__.pyi": "",
    "/src/pyrightconfig.json": "{ \n  \"pythonVersion\": \"3.6\",\n  \"pythonPlatform\": \"Linux\",\n  \"typeCheckingMode\": \"basic\",\n  \"typeshedPath\": \"/typeshed/\",\n  \"reportMissingModuleSource\": false,\n  \"reportWildcardImportFromLibrary\": false,\n  \"verboseOutput\": true\n }\n"
  }
}