{
  "files": {
    "/typeshed/stdlib/VERSIONS": "# The structure of this file is as follows:\n# - Blank lines and comments starting with `#` are ignored.\n# - Lines contain the name of a module, followed by a colon,\n#   a space, and a version range (for example: `symbol: 2.7-3.9`).\n#\n# Version ranges may be of the form \"X.Y-A.B\" or \"X.Y-\". The\n# first form means that a module was introduced in version X.Y and last\n# available in version A.B. The second form means that the module was\n# introduced in version X.Y and is still available in the latest\n# version of Python.\n#\n# If a submodule is not listed separately, it has the same lifetime as\n# its parent module.\n#\n# Python versions before 2.7 are ignored, so any module that was already\n# present in 2.7 will have \"2.7\" as its minimum version. Version ranges\n# for unsupported versions of Python 3 (currently 3.5 and lower) are\n# generally accurate but we do not guarantee their correctness.\n\nantigravity: 3.0-\narray: 3.0-\naudio: 3.0-\nbuiltins: 3.0-\nerrno: 3.0-\ngc: 3.0-\nlove: 3.0-\nmachine: 3.0-\nmath: 3.0-\nmicrobit: 3.0-\nmicropython: 3.0-\nmusic: 3.0-\nneopixel: 3.0-\nos: 3.0-\nradio: 3.0-\nrandom: 3.0-\nspeech: 3.0-\nstruct: 3.0-\nsys: 3.0-\nthis: 3.0-\ntime: 3.0-\ntyping_extensions: 3.0-\ntyping: 3.0-\nuarray: 3.0-\nucollections: 3.0-\nuerrno: 3.0-\nuos: 3.0-\nurandom: 3.0-\nustruct: 3.0-\nusys: 3.0-\nutime: 3.0-",
    "/typeshed/stdlib/abc.pyi": "",
    "/typeshed/stdlib/array.pyi": "",
    "/typeshed/stdlib/audio.pyi": "\"\"\"Play sounds using the micro:bit (import ``audio`` for V1 compatibility).\n\"\"\"\n\n# Re-export for V1 compatibility.\nfrom .microbit.audio import (\n    is_playing as is_playing,\n    play as play,\n    stop as stop,\n    AudioFrame as AudioFrame,\n    SoundEffect as SoundEffect,\n)\n",
    "/typeshed/stdlib/builtins.pyi": "",
    "/typeshed/stdlib/errno.pyi": "",
    "/typeshed/stdlib/gc.pyi": "",
    "/typeshed/stdlib/log.pyi": "",
    "/typeshed/stdlib/love.pyi": "",
    "/typeshed/stdlib/machine.pyi": "\"\"\"\ub85c\uc6b0 \ub808\ubca8 \uc720\ud2f8\ub9ac\ud2f0\uc785\ub2c8\ub2e4.\"\"\"\nfrom typing import Any\nfrom .calliope import MicroBitDigitalPin\n\ndef unique_id() -> bytes:\n    \"\"\"\ubcf4\ub4dc\uc758 \uace0\uc720 \uc2dd\ubcc4\uc790\uac00 \uc788\ub294 \ubc14\uc774\ud2b8 \ubb38\uc790\uc5f4\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\nExample: ``machine.unique_id()``\n\n:return: An identifier that varies from one board instance to another.\"\"\"\n    ...\n\ndef reset() -> None:\n    \"\"\"\uc678\ubd80 \ucd08\uae30\ud654 \ubc84\ud2bc\uc744 \ub204\ub978 \uac83\uacfc \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \uae30\uae30\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4.\n\nExample: ``machine.reset()``\"\"\"\n    ...\n\ndef freq() -> int:\n    \"\"\"\ud5e4\ub974\uce20\ub85c \ud45c\uc2dc\ub41c CPU \uc9c4\ub3d9\uc218\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\nExample: ``machine.freq()``\n\n:return: The CPU frequency.\"\"\"\n    ...\n\ndef disable_irq() -> Any:\n    \"\"\"\uc778\ud130\ub7fd\ud2b8 \uc694\uccad\uc744 \ube44\ud65c\uc131\ud654\ud569\ub2c8\ub2e4.\n\nExample: ``interrupt_state = machine.disable_irq()``\n\n:return: the previous IRQ state which should be considered an opaque value\n\nThe return value should be passed to the ``enable_irq`` function to restore\ninterrupts to their original state.\"\"\"\n    ...\n\ndef enable_irq(state: Any) -> None:\n    \"\"\"\uc778\ud130\ub7fd\ud2b8 \uc694\uccad\uc744 \uc7ac\ud65c\uc131\ud654\ud569\ub2c8\ub2e4.\n\nExample: ``machine.enable_irq(interrupt_state)``\n\n:param state: ``disable_irq`` \ud568\uc218\uc5d0\uc11c \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ud638\ucd9c\ub41c \uac12\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4.\"\"\"\n    ...\n\ndef time_pulse_us(pin: MicroBitDigitalPin, pulse_level: int, timeout_us: int=1000000) -> int:\n    \"\"\"\ud540 \ud384\uc2a4 \uc2dc\uac04\uc744 \uce21\uc815\ud569\ub2c8\ub2e4.\n\nExample: ``time_pulse_us(pin0, 1)``\n\nIf the current input value of the pin is different to ``pulse_level``, the\nfunction first waits until the pin input becomes equal to\n``pulse_level``, then times the duration that the pin is equal to\n``pulse_level``. If the pin is already equal to ``pulse_level`` then timing\nstarts straight away.\n\n:param pin: (\ud540) \uc0ac\uc6a9\ud560 \ud540\n:param pulse_level: (\ud384\uc2a4 \ub808\ubca8) \ub85c\uc6b0 \ud384\uc2a4\uc758 \uc2dc\uac04\uc744 \uce21\uc815\ud558\ub824\uba74 0, \ud558\uc774 \ud384\uc2a4\ub294 1\n:param timeout_us: \ub9c8\uc774\ud06c\ub85c\ucd08 \uc2dc\uac04 \ucd08\uacfc\n:return: The duration of the pulse in microseconds, or -1 for a timeout waiting for the level to match ``pulse_level``, or -2 on timeout waiting for the pulse to end\"\"\"\n    ...\n\nclass mem:\n    \"\"\"``mem8``, ``mem16``, ``mem32`` \uba54\ubaa8\ub9ac \ubdf0 \ud074\ub798\uc2a4\"\"\"\n\n    def __getitem__(self, address: int) -> int:\n        \"\"\"\uba54\ubaa8\ub9ac \uac12\uc5d0 \uc561\uc138\uc2a4\ud569\ub2c8\ub2e4.\n\n:param address: \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc785\ub2c8\ub2e4.\n:return: The value at that address as an integer.\"\"\"\n        ...\n\n    def __setitem__(self, address: int, value: int) -> None:\n        \"\"\"\uc81c\uacf5\ub41c \uc8fc\uc18c\uc5d0 \uac12\uc744 \uc124\uc815\ud569\ub2c8\ub2e4.\n\n:param address: \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc785\ub2c8\ub2e4.\n:param value: \uc124\uc815\ud560 \uc815\uc218\uac12\uc785\ub2c8\ub2e4.\"\"\"\n        ...\nmem8: mem\n\"\"\"8\ube44\ud2b8(\ubc14\uc774\ud2b8) \uba54\ubaa8\ub9ac \ubdf0\uc785\ub2c8\ub2e4.\"\"\"\nmem16: mem\n\"\"\"16\ube44\ud2b8 \uba54\ubaa8\ub9ac \ubdf0\uc785\ub2c8\ub2e4.\"\"\"\nmem32: mem\n\"\"\"32\ube44\ud2b8 \uba54\ubaa8\ub9ac \ubdf0\uc785\ub2c8\ub2e4.\"\"\"",
    "/typeshed/stdlib/math.pyi": "",
    "/typeshed/stdlib/micropython.pyi": "",
    "/typeshed/stdlib/music.pyi": "\"\"\"\uba5c\ub85c\ub514\ub97c \uc0dd\uc131\ud558\uace0 \uc7ac\uc0dd\ud569\ub2c8\ub2e4.\"\"\"\nfrom typing import Optional, Tuple, Union, List\nfrom .calliope import MicroBitDigitalPin, pin0\nDADADADUM: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ubca0\ud1a0\ubca4\uc758 \uad50\ud5a5\uace1 \uc81c5\ubc88 \ub2e4 \ub2e8\uc870 \ub3c4\uc785\ubd80\uc785\ub2c8\ub2e4.\"\"\"\nENTERTAINER: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc2a4\ucf67 \uc870\ud50c\ub9b0\uc758 \ub798\uadf8\ud0c0\uc784 \uace0\uc804 \u201cThe Entertainer\u201d \ub3c4\uc785\ubd80 \uc77c\ubd80\uc785\ub2c8\ub2e4.\"\"\"\nPRELUDE: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc694\ud55c \uc81c\ubc14\uc2a4\ud2f0\uc548 \ubc14\ud750\uc758 48 Preludes and Fugues \ub2e4 \uc7a5\uc870 \uccab \uc804\uc8fc\uace1 \ub3c4\uc785\ubd80\uc785\ub2c8\ub2e4.\"\"\"\nODE: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ubca0\ud1a0\ubca4\uc758 \uad50\ud5a5\uace1 \uc81c9\ubc88 \ub77c \ub2e8\uc870 \u201cOde to Joy\u201d \ud14c\ub9c8\uc785\ub2c8\ub2e4.\"\"\"\nNYAN: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: Nyan Cat \ud14c\ub9c8\uc785\ub2c8\ub2e4(http://www.nyan.cat/).\n\nThe composer is unknown. This is fair use for educational porpoises (as they say in New York).\"\"\"\nRINGTONE: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ud734\ub300\ud3f0 \ubca8\uc18c\ub9ac\uc640 \uc720\uc0ac\ud55c \uc18c\ub9ac\uc785\ub2c8\ub2e4.\n\nTo be used to indicate an incoming message.\n\"\"\"\nFUNK: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ube44\ubc00 \uc694\uc6d0\uacfc \ucc9c\uc7ac \ubc94\uc8c4\uc790\uc5d0 \uc5b4\uc6b8\ub9ac\ub294 \ud391\ud0a4 \ubca0\uc774\uc2a4 \ub77c\uc778\uc785\ub2c8\ub2e4.\"\"\"\nBLUES: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ubd80\uae30 \uc6b0\uae30 12\ubc14 \ube14\ub8e8\uc2a4 \uc6cc\ud0b9 \ubca0\uc774\uc2a4\uc785\ub2c8\ub2e4.\"\"\"\nBIRTHDAY: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc0dd\uc77c \ucd95\ud558 \ub178\ub798\uc785\ub2c8\ub2e4.\n\nFor copyright status see: http://www.bbc.co.uk/news/world-us-canada-34332853\n\"\"\"\nWEDDING: Tuple[str, ...]\n\"\"\"Melody: \ubc14\uadf8\ub108\uc758 \uc624\ud398\ub77c \u201c\ub85c\uc5d4\uadf8\ub9b0\u201d\uc758 \uacb0\ud63c\uc2dd \ud569\ucc3d\uc785\ub2c8\ub2e4.\"\"\"\nFUNERAL: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \u201c\uc7a5\uc1a1\ud589\uc9c4\uace1\u201d\uc774\ub77c\uace0\ub3c4 \uc54c\ub824\uc9c4 \ud504\ub808\ub370\ub9ac\ud06c \uc1fc\ud33d\uc758 \ud53c\uc544\ub178 \uc18c\ub098\ud0c0 \uc81c2\ubc88 B\u266d \ub2e8\uc870 Op. 35\uc785\ub2c8\ub2e4.\"\"\"\nPUNCHLINE: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ub18d\ub2f4\ud560 \ub54c \ub098\uc624\ub294 \uc7ac\ubbf8\uc788\ub294 \uba5c\ub85c\ub514\uc785\ub2c8\ub2e4.\"\"\"\nPYTHON: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc874 \ud544\ub9bd \uc218\uc790\uc758 \u201c\uc790\uc720\uc758 \uc885\u201d \ud589\uc9c4\uace1\uc785\ub2c8\ub2e4. \u201c\ubaac\ud2f0 \ud30c\uc774\ud2bc\uc758 \ube44\ud589 \uc11c\ucee4\uc2a4\u201d \ud14c\ub9c8\uace1\uc73c\ub85c\ub3c4 \uc54c\ub824\uc838 \uc788\uc2b5\ub2c8\ub2e4(Python \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 \ubaac\ud2f0 \ud30c\uc774\ud2bc\uc758 \uc774\ub984\uc5d0\uc11c \uc720\ub798\ud588\uc2b5\ub2c8\ub2e4).\"\"\"\nBADDY: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ubb34\uc131 \uc601\ud654 \uc2dc\ub300\uc758 \uc545\ub2f9 \ub4f1\uc7a5 \uba5c\ub85c\ub514\uc785\ub2c8\ub2e4.\"\"\"\nCHASE: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \ubb34\uc131 \uc601\ud654 \uc2dc\ub300\uc758 \ucd94\uaca9 \uc7a5\uba74 \uba5c\ub85c\ub514\uc785\ub2c8\ub2e4.\"\"\"\nBA_DING: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514:\uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub0ac\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc8fc\ub294 \uc9e7\uc740 \uc2e0\ud638\uc74c\uc785\ub2c8\ub2e4.\"\"\"\nWAWAWAWAA: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc544\uc8fc \uc2ac\ud508 \ud2b8\ub7fc\ubcf8 \uc18c\ub9ac\uc785\ub2c8\ub2e4.\"\"\"\nJUMP_UP: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uac8c\uc784\uc5d0\uc11c \uc704\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \ud45c\ud604\ud558\ub294 \uc18c\ub9ac\uc785\ub2c8\ub2e4.\"\"\"\nJUMP_DOWN: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uac8c\uc784\uc5d0\uc11c \uc544\ub798\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \ud45c\ud604\ud558\ub294 \uc18c\ub9ac\uc785\ub2c8\ub2e4.\"\"\"\nPOWER_UP: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc5c5\uc801 \ub2ec\uc131\uc744 \uc54c\ub9ac\ub294 \ud321\ud30c\ub974 \uc18c\ub9ac\uc785\ub2c8\ub2e4.\"\"\"\nPOWER_DOWN: Tuple[str, ...]\n\"\"\"\uba5c\ub85c\ub514: \uc5c5\uc801 \ub2ec\uc131 \uc2e4\ud328\ub97c \uc758\ubbf8\ud558\ub294 \uc2ac\ud508 \ud321\ud30c\ub974 \uc18c\ub9ac\uc785\ub2c8\ub2e4.\"\"\"\n\ndef set_tempo(ticks: int=4, bpm: int=120) -> None:\n    \"\"\"\ud50c\ub808\uc774\ubc31\uc758 \ube60\ub974\uae30\ub97c \ub300\ub7b5\uc801\uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\n\nExample: ``music.set_tempo(bpm=120)``\n\n:param ticks: \ube44\ud2b8 \ud558\ub098\ub97c \uad6c\uc131\ud558\ub294 \ud2f1\uc758 \uc218\uc785\ub2c8\ub2e4.\n:param bpm: \ubd84\ub2f9 \ube44\ud2b8 \uc218\ub97c \uacb0\uc815\ud558\ub294 \uc815\uc218\uc785\ub2c8\ub2e4.\n\nSuggested default values allow the following useful behaviour:\n\n- music.set_tempo() \u2013 reset the tempo to default of ticks = 4, bpm = 120\n- music.set_tempo(ticks=8) \u2013 change the \u201cdefinition\u201d of a beat\n- music.set_tempo(bpm=180) \u2013 just change the tempo\n\nTo work out the length of a tick in milliseconds is very simple arithmetic:\n60000/bpm/ticks_per_beat. For the default values that\u2019s\n60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.\"\"\"\n    ...\n\ndef get_tempo() -> Tuple[int, int]:\n    \"\"\"\ud604\uc7ac \ube60\ub974\uae30\ub97c \uc815\uc218 \ud29c\ud50c\ub85c \uac00\uc838\uc635\ub2c8\ub2e4: ``(ticks, bpm)``.\n\nExample: ``ticks, beats = music.get_tempo()``\n\n:return: The temp as a tuple with two integer values, the ticks then the beats per minute.\"\"\"\n    ...\n\ndef play(music: Union[str, List[str], Tuple[str, ...]], pin: Optional[MicroBitDigitalPin]=pin0, wait: bool=True, loop: bool=False) -> None:\n    \"\"\"\uc74c\uc545\uc744 \uc7ac\uc0dd\ud569\ub2c8\ub2e4.\n\nExample: ``music.play(music.NYAN)``\n\n:param music: `\ubcc4\ucca8 <https://microbit-micropython.readthedocs.io/en/v2-docs/music.html#musical-notation>`_\uc5d0 \uba85\uc2dc\ub41c \uc74c\uc545\n:param pin: (\ud540) \uc678\uc7a5 \uc2a4\ud53c\ucee4\uc5d0 \uc0ac\uc6a9\ud560 \ucd9c\ub825 \ud540\uc785\ub2c8\ub2e4(\uae30\ubcf8\uac12 ``pin0``). ``None``\uc73c\ub85c \uc124\uc815\ud558\uba74 \uc18c\ub9ac\uac00 \uc7ac\uc0dd\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n:param wait: ``wait``\uc774 ``True``\ub85c \uc124\uc815\ub41c \uacbd\uc6b0 \uc774 \uae30\ub2a5\uc740 \ube14\ub85c\ud0b9 \uc0c1\ud0dc\uac00 \ub429\ub2c8\ub2e4.\n:param loop: ``loop``\uac00 ``True``\uc778 \uacbd\uc6b0 ``stop``\uc774 \ud638\ucd9c\ub418\uac70\ub098 \ube14\ub85c\ud0b9 \ud638\ucd9c\uc774 \uc778\ud130\ub7fd\ud2b8\ub418\uae30 \uc804\uae4c\uc9c0 \uacc4\uc18d \ubc18\ubcf5\ub429\ub2c8\ub2e4.\n\nMany built-in melodies are defined in this module.\"\"\"\n    ...\n\ndef pitch(frequency: int, duration: int=-1, pin: Optional[MicroBitDigitalPin]=pin0, wait: bool=True) -> None:\n    \"\"\"\uc74c\uc744 \uc7ac\uc0dd\ud569\ub2c8\ub2e4. (\uc55e-\ub4a4 \uae30\uc6b8\uae30)\n\nExample: ``music.pitch(185, 1000)``\n\n:param frequency: (\uc9c4\ub3d9\uc218) \uc815\uc218 \uc9c4\ub3d9\uc218\uc785\ub2c8\ub2e4.\n:param duration: \ubc00\ub9ac\ucd08 \ub2e8\uc704\uc758 \uae30\uac04\uc785\ub2c8\ub2e4. \uc74c\uc218\uc778 \uacbd\uc6b0 \uc18c\ub9ac\uac00 \ub2e4\uc74c \ud638\ucd9c \ub610\ub294 ``stop`` \ud638\ucd9c\uae4c\uc9c0 \uacc4\uc18d \uc7ac\uc0dd\ub429\ub2c8\ub2e4.\n:param pin: (\ud540) \ucd9c\ub825 \ud540\uc785\ub2c8\ub2e4(\uae30\ubcf8\uac12 ``pin0``)(\uc120\ud0dd \uc0ac\ud56d).\n:param wait: ``wait``\uc774 ``True``\ub85c \uc124\uc815\ub41c \uacbd\uc6b0 \uc774 \uae30\ub2a5\uc740 \ube14\ub85c\ud0b9 \uc0c1\ud0dc\uac00 \ub429\ub2c8\ub2e4.\n\nFor example, if the frequency is set to 440 and the length to\n1000 then we hear a standard concert A for one second.\n\nYou can only play one pitch on one pin at any one time.\"\"\"\n    ...\n\ndef stop(pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"\ub0b4\uc7a5 \uc2a4\ud53c\ucee4\uc640 \ud540\uc73c\ub85c \ucd9c\ub825\ub418\ub294 \ubaa8\ub4e0 \uc74c\uc545 \ud50c\ub808\uc774\ubc31\uc744 \uba48\ucda5\ub2c8\ub2e4.\n\nExample: ``music.stop()``\n\n:param pin: (\ud540) \ud540\uc744 \ud2b9\uc815\ud558\uae30 \uc704\ud55c \uc778\uc790\uc785\ub2c8\ub2e4(\uc608: ``music.stop(pin1)``)(\uc120\ud0dd \uc0ac\ud56d).\"\"\"\n\ndef reset() -> None:\n    \"\"\"\ud2f1, bpm, \uae30\uac04 \ubc0f \uc625\ud0c0\ube0c\ub97c \uae30\ubcf8\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4.\n\nExample: ``music.reset()``\n\nValues:\n- ``ticks = 4``\n- ``bpm = 120``\n- ``duration = 4``\n- ``octave = 4``\"\"\"\n    ...",
    "/typeshed/stdlib/neopixel.pyi": "\"\"\"\uac1c\ubcc4 \uc8fc\uc18c\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\ub294 RGB \ubc0f RGBW LED \uc2a4\ud2b8\ub9bd\uc785\ub2c8\ub2e4.\"\"\"\nfrom .calliope import MicroBitDigitalPin\nfrom typing import Tuple\n\nclass NeoPixel:\n\n    def __init__(self, pin: MicroBitDigitalPin, n: int, bpp: int=3) -> None:\n        \"\"\"\ud540\uc73c\ub85c \uc81c\uc5b4\ub418\ub294 \uc0c8\ub85c\uc6b4 \uc2a4\ud2b8\ub9bd\uc758 \ub124\uc624\ud53d\uc140 LED\ub97c \uc2dc\uc791\ud569\ub2c8\ub2e4. (string)\n\nExample: ``np = neopixel.NeoPixel(pin0, 8)``\n\nTo support RGBW neopixels, a third argument can be passed to\n``NeoPixel`` to indicate the number of bytes per pixel (``bpp``).\nFor RGBW, this is is 4 rather than the default of 3 for RGB and GRB.\n\nEach pixel is addressed by a position (starting from 0). Neopixels are\ngiven RGB (red, green, blue) / RGBW (red, green, blue, white) values\nbetween 0-255 as a tuple. For example, in RGB, ``(255,255,255)`` is\nwhite. In RGBW, ``(255,255,255,0)`` or ``(0,0,0,255)`` is white.\n\nSee `the online docs <https://microbit-micropython.readthedocs.io/en/v2-docs/neopixel.html>`_ for warnings and other advice.\n\n:param pin: (\ud540) \ub124\uc624\ud53d\uc140 \uc2a4\ud2b8\ub9bd\uc744 \uc81c\uc5b4\ud558\ub294 \ud540\uc785\ub2c8\ub2e4.\n:param n: \uc2a4\ud2b8\ub9bd\uc758 \ub124\uc624\ud53d\uc140 \uc218\uc785\ub2c8\ub2e4.\n:param bpp: \ud53d\uc140\ub2f9 \ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. micro:bit V2 RGBW \ub124\uc624\ud53d\uc140 \uc9c0\uc6d0\uc744 \uc704\ud574\uc11c\ub294 RGB \ubc0f GRB\uc758 \uae30\ubcf8\uac12 3 \ub300\uc2e0 4\ub97c \ud328\uc2a4\ud574\uc57c \ud569\ub2c8\ub2e4.\"\"\"\n        ...\n\n    def clear(self) -> None:\n        \"\"\"\ubaa8\ub4e0 \ud53d\uc140\uc744 \uc9c0\uc6c1\ub2c8\ub2e4.\n\nExample: ``np.clear()``\"\"\"\n        ...\n\n    def show(self) -> None:\n        \"\"\"\ud53d\uc140\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4.\n\nExample: ``np.show()``\n\nMust be called for any updates to become visible.\"\"\"\n        ...\n\n    def write(self) -> None:\n        \"\"\"\ud53d\uc140\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4(micro:bit V2 \uc804\uc6a9).\n\nExample: ``np.write()``\n\nMust be called for any updates to become visible.\n\nEquivalent to ``show``.\"\"\"\n        ...\n\n    def fill(self, colour: Tuple[int, ...]) -> None:\n        \"\"\"\ubaa8\ub4e0 \ud53d\uc140\uc5d0 \uc8fc\uc5b4\uc9c4 RGB/RGBW \uac12\uc744 \uce60\ud569\ub2c8\ub2e4.\n\nExample: ``np.fill((0, 0, 255))``\n\n:param colour: \ud53d\uc140 \ub2f9 \ubc14\uc774\ud2b8 \uc218(bpp)\uc640 \uac19\uc740 \uae38\uc774\uc758 \ud29c\ud50c\uc785\ub2c8\ub2e4.\n\nUse in conjunction with ``show()`` to update the neopixels.\"\"\"\n        ...\n\n    def __setitem__(self, key: int, value: Tuple[int, ...]) -> None:\n        \"\"\"\ud53d\uc140 \uc0c9\uc0c1\uc744 \uc124\uc815\ud569\ub2c8\ub2e4.\n\nExample: ``np[0] = (255, 0, 0)``\n\n:param key: \ud53d\uc140 \ubc88\ud638\uc785\ub2c8\ub2e4.\n:param value: \uc0c9\uc0c1\uc785\ub2c8\ub2e4.\"\"\"\n\n    def __getitem__(self, key: int) -> Tuple[int, ...]:\n        \"\"\"\ud53d\uc140 \uc0c9\uc0c1\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\nExample: ``r, g, b = np[0]``\n\n:param key: \ud53d\uc140 \ubc88\ud638\uc785\ub2c8\ub2e4.\n:return: The colour tuple.\"\"\"\n\n    def __len__(self) -> int:\n        \"\"\"\uc774 \ud53d\uc140 \uc2a4\ud2b8\ub9bd\uc758 \uae38\uc774\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\nExample: ``len(np)``\"\"\"",
    "/typeshed/stdlib/os.pyi": "",
    "/typeshed/stdlib/power.pyi": "\"\"\"Manage the power modes of the micro:bit (V2 only).\n\"\"\"\n\nfrom microbit import MicroBitDigitalPin, Button\nfrom typing import Optional, Tuple, Union\n\ndef off() -> None:\n    \"\"\"Power down the board to the lowest possible power mode.\n\n    Example: ``power.off()``\n\n    This is the equivalent to pressing the reset button for a few seconds,\n    to set the board in \"Off mode\".\n\n    The micro:bit will only wake up if the reset button is pressed or,\n    if on battery power, when a USB cable is connected.\n\n    When the board wakes up it will start for a reset state, so your program\n    will start running from the beginning.\n    \"\"\"\n    ...\n\ndef deep_sleep(\n    ms: Optional[int] = None,\n    wake_on: Optional[\n        Union[MicroBitDigitalPin, Button] | Tuple[MicroBitDigitalPin | Button, ...]\n    ] = None,\n    run_every: bool = True,\n) -> None:\n    \"\"\"Set the micro:bit into a low power mode where it can wake up and continue operation.\n\n    Example: ``power.deep_sleep(wake_on=(button_a, button_b))``\n\n    The program state is preserved and when it wakes up it will resume\n    operation where it left off.\n\n    Deep Sleep mode will consume more battery power than Off mode.\n\n    The wake up sources are configured via arguments.\n\n    The board will always wake up when receiving UART data, when the reset\n    button is pressed (which resets the board) or, in battery power,\n    when the USB cable is inserted.\n\n    When the ``run_every`` parameter is set to ``True`` (the default), any\n    function scheduled with ``run_every`` will momentarily wake up the board\n    to run and when it finishes it will go back to sleep.\n\n    :param ms: A time in milliseconds to wait before it wakes up.\n    :param wake_on: A single instance or a tuple of pins and/or buttons to wake up the board, e.g. ``deep_sleep(wake_on=button_a)`` or ``deep_sleep(wake_on=(pin0, pin2, button_b))``.\n    :param run_every: A boolean to configure if the functions scheduled with ``microbit.run_every`` will continue to run while it sleeps.\n    \"\"\"\n    ...\n",
    "/typeshed/stdlib/radio.pyi": "",
    "/typeshed/stdlib/random.pyi": "",
    "/typeshed/stdlib/speech.pyi": "\"\"\"micro:bit\uc774 \ub9d0\ud558\uace0 \ub178\ub798\ubd80\ub974\uace0 \uc18c\ub9ac\ub97c \uc7ac\uc0dd\ud558\uac8c \ud569\ub2c8\ub2e4.\"\"\"\nfrom typing import Optional\nfrom .calliope import MicroBitDigitalPin, pin0\n\ndef translate(words: str) -> str:\n    \"\"\"\uc601\ub2e8\uc5b4\ub97c \uc74c\uc18c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.\n\nExample: ``speech.translate('hello world')``\n\n:param words: \uc601\ub2e8\uc5b4 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n:return: A string containing a best guess at the appropriate phonemes to pronounce.\nThe output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_.\n\nThis function should be used to generate a first approximation of phonemes\nthat can be further hand-edited to improve accuracy, inflection and\nemphasis.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef pronounce(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"\uc74c\uc18c\ub97c \ubc1c\uc74c\ud569\ub2c8\ub2e4.\n\nExample: ``speech.pronounce(' /HEHLOW WERLD')``\n\n:param phonemes: \ubc1c\uc74c\ud560 \uc74c\uc18c\uc758 \ubb38\uc790\uc5f4\n:param pitch: (\uc55e-\ub4a4 \uae30\uc6b8\uae30) \ubaa9\uc18c\ub9ac\uc758 \uc74c\ub192\uc774\ub97c \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param speed: \ubaa9\uc18c\ub9ac\uc758 \uc18d\ub3c4\ub97c \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param mouth: \ubaa9\uc18c\ub9ac\uc758 \uc785 \ubaa8\uc591\uc744 \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param throat: \ubaa9\uc18c\ub9ac\uc758 \ubaa9 \ubaa8\uc591\uc744 \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param pin: (\ud540) ``pin0``\uc758 \uae30\ubcf8\uac12\uc744 \ub36e\uc5b4\uc4f0\uace0 \ucd9c\ub825 \ud540\uc744 \ud2b9\uc815\ud558\ub294 \uc778\uc790\uc785\ub2c8\ub2e4(\uc120\ud0dd \uc0ac\ud56d).\n\ud540\uc5d0\uc11c \uc0ac\uc6b4\ub4dc\ub97c \uc7ac\uc0dd\ud558\uae30 \uc2eb\ub2e4\uba74 ``pin=None``\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. micro:bit V2 \uc804\uc6a9\uc785\ub2c8\ub2e4.\n\nOverride the optional pitch, speed, mouth and throat settings to change the\ntimbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef say(words: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"\uc601\uc5b4 \ub2e8\uc5b4\ub97c \ub9d0\ud569\ub2c8\ub2e4.\n\nExample: ``speech.say('hello world')``\n\n:param words: \ub9d0\ud560 \ub2e8\uc5b4\uc758 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n:param pitch: (\uc55e-\ub4a4 \uae30\uc6b8\uae30) \ubaa9\uc18c\ub9ac\uc758 \uc74c\ub192\uc774\ub97c \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param speed: \ubaa9\uc18c\ub9ac\uc758 \uc18d\ub3c4\ub97c \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param mouth: \ubaa9\uc18c\ub9ac\uc758 \uc785 \ubaa8\uc591\uc744 \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param throat: \ubaa9\uc18c\ub9ac\uc758 \ubaa9 \ubaa8\uc591\uc744 \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param pin: (\ud540) ``pin0``\uc758 \uae30\ubcf8\uac12\uc744 \ub36e\uc5b4\uc4f0\uace0 \ucd9c\ub825 \ud540\uc744 \ud2b9\uc815\ud558\ub294 \uc778\uc790\uc785\ub2c8\ub2e4(\uc120\ud0dd \uc0ac\ud56d).\n\ud540\uc5d0\uc11c \uc0ac\uc6b4\ub4dc\ub97c \uc7ac\uc0dd\ud558\uae30 \uc2eb\ub2e4\uba74 ``pin=None``\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. micro:bit V2 \uc804\uc6a9\uc785\ub2c8\ub2e4.\n\nThe result is semi-accurate for English. Override the optional pitch, speed,\nmouth and throat settings to change the timbre (quality) of the voice.\n\nThis is a short-hand equivalent of:\n``speech.pronounce(speech.translate(words))``\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef sing(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"\uc74c\uc18c\ub97c \ub178\ub798\ud569\ub2c8\ub2e4.\n\nExample: ``speech.sing(' /HEHLOW WERLD')``\n\n:param phonemes: \ub178\ub798\ud560 \ub2e8\uc5b4 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4.\n:param pitch: (\uc55e-\ub4a4 \uae30\uc6b8\uae30) \ubaa9\uc18c\ub9ac\uc758 \uc74c\ub192\uc774\ub97c \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param speed: \ubaa9\uc18c\ub9ac\uc758 \uc18d\ub3c4\ub97c \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param mouth: \ubaa9\uc18c\ub9ac\uc758 \uc785 \ubaa8\uc591\uc744 \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param throat: \ubaa9\uc18c\ub9ac\uc758 \ubaa9 \ubaa8\uc591\uc744 \ud45c\ud604\ud558\ub294 \uc22b\uc790\n:param pin: (\ud540) ``pin0``\uc758 \uae30\ubcf8\uac12\uc744 \ub36e\uc5b4\uc4f0\uace0 \ucd9c\ub825 \ud540\uc744 \ud2b9\uc815\ud558\ub294 \uc778\uc790\uc785\ub2c8\ub2e4(\uc120\ud0dd \uc0ac\ud56d).\n\ud540\uc5d0\uc11c \uc0ac\uc6b4\ub4dc\ub97c \uc7ac\uc0dd\ud558\uae30 \uc2eb\ub2e4\uba74 ``pin=None``\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. micro:bit V2 \uc804\uc6a9\uc785\ub2c8\ub2e4.\n\nOverride the optional pitch, speed, mouth and throat settings to change\nthe timbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...",
    "/typeshed/stdlib/struct.pyi": "",
    "/typeshed/stdlib/sys.pyi": "",
    "/typeshed/stdlib/this.pyi": "",
    "/typeshed/stdlib/time.pyi": "",
    "/typeshed/stdlib/types.pyi": "",
    "/typeshed/stdlib/typing.pyi": "",
    "/typeshed/stdlib/typing_extensions.pyi": "",
    "/typeshed/stdlib/uarray.pyi": "",
    "/typeshed/stdlib/ucollections.pyi": "",
    "/typeshed/stdlib/uerrno.pyi": "",
    "/typeshed/stdlib/urandom.pyi": "",
    "/typeshed/stdlib/ustruct.pyi": "",
    "/typeshed/stdlib/usys.pyi": "",
    "/typeshed/stdlib/utime.pyi": "",
    "/typeshed/stdlib/calliopemini/__init__.pyi": "",
    "/typeshed/stdlib/calliopemini/accelerometer.pyi": "",
    "/typeshed/stdlib/calliopemini/audio.pyi": "",
    "/typeshed/stdlib/calliopemini/compass.pyi": "",
    "/typeshed/stdlib/calliopemini/display.pyi": "",
    "/typeshed/stdlib/calliopemini/i2c.pyi": "",
    "/typeshed/stdlib/calliopemini/microphone.pyi": "",
    "/typeshed/stdlib/calliopemini/speaker.pyi": "",
    "/typeshed/stdlib/calliopemini/spi.pyi": "",
    "/typeshed/stdlib/calliopemini/uart.pyi": "",
    "/typeshed/stdlib/_typeshed/__init__.pyi": "",
    "/typeshed/stdlib/collections/__init__.pyi": "",
    "/src/pyrightconfig.json": "{ \n  \"pythonVersion\": \"3.6\",\n  \"pythonPlatform\": \"Linux\",\n  \"typeCheckingMode\": \"basic\",\n  \"typeshedPath\": \"/typeshed/\",\n  \"reportMissingModuleSource\": false,\n  \"reportWildcardImportFromLibrary\": false,\n  \"verboseOutput\": true\n }\n"
  }
}