{
  "files": {
    "/typeshed/stdlib/VERSIONS": "# The structure of this file is as follows:\n# - Blank lines and comments starting with `#` are ignored.\n# - Lines contain the name of a module, followed by a colon,\n#   a space, and a version range (for example: `symbol: 2.7-3.9`).\n#\n# Version ranges may be of the form \"X.Y-A.B\" or \"X.Y-\". The\n# first form means that a module was introduced in version X.Y and last\n# available in version A.B. The second form means that the module was\n# introduced in version X.Y and is still available in the latest\n# version of Python.\n#\n# If a submodule is not listed separately, it has the same lifetime as\n# its parent module.\n#\n# Python versions before 2.7 are ignored, so any module that was already\n# present in 2.7 will have \"2.7\" as its minimum version. Version ranges\n# for unsupported versions of Python 3 (currently 3.5 and lower) are\n# generally accurate but we do not guarantee their correctness.\n\nantigravity: 3.0-\narray: 3.0-\naudio: 3.0-\nbuiltins: 3.0-\nerrno: 3.0-\ngc: 3.0-\nlove: 3.0-\nmachine: 3.0-\nmath: 3.0-\nmicrobit: 3.0-\nmicropython: 3.0-\nmusic: 3.0-\nneopixel: 3.0-\nos: 3.0-\nradio: 3.0-\nrandom: 3.0-\nspeech: 3.0-\nstruct: 3.0-\nsys: 3.0-\nthis: 3.0-\ntime: 3.0-\ntyping_extensions: 3.0-\ntyping: 3.0-\nuarray: 3.0-\nucollections: 3.0-\nuerrno: 3.0-\nuos: 3.0-\nurandom: 3.0-\nustruct: 3.0-\nusys: 3.0-\nutime: 3.0-",
    "/typeshed/stdlib/abc.pyi": "",
    "/typeshed/stdlib/array.pyi": "",
    "/typeshed/stdlib/audio.pyi": "\"\"\"Play sounds using the micro:bit (import ``audio`` for V1 compatibility).\n\"\"\"\n\n# Re-export for V1 compatibility.\nfrom .microbit.audio import (\n    is_playing as is_playing,\n    play as play,\n    stop as stop,\n    AudioFrame as AudioFrame,\n    SoundEffect as SoundEffect,\n)\n",
    "/typeshed/stdlib/builtins.pyi": "",
    "/typeshed/stdlib/errno.pyi": "",
    "/typeshed/stdlib/gc.pyi": "",
    "/typeshed/stdlib/log.pyi": "",
    "/typeshed/stdlib/love.pyi": "",
    "/typeshed/stdlib/machine.pyi": "\"\"\"Hulpprogramma's op laag niveau.\"\"\"\nfrom typing import Any\nfrom .calliope import MicroBitDigitalPin\n\ndef unique_id() -> bytes:\n    \"\"\"Krijg een byte string met een uniek id van een bord. (uniek id)\n\nExample: ``machine.unique_id()``\n\n:return: An identifier that varies from one board instance to another.\"\"\"\n    ...\n\ndef reset() -> None:\n    \"\"\"Reset het apparaat op een manier die lijkt op de externe RESET knop.\n\nExample: ``machine.reset()``\"\"\"\n    ...\n\ndef freq() -> int:\n    \"\"\"Krijg de CPU frequentie in Hertz. (frequentie)\n\nExample: ``machine.freq()``\n\n:return: The CPU frequency.\"\"\"\n    ...\n\ndef disable_irq() -> Any:\n    \"\"\"Interruptie verzoeken uitschakelen. (irq uitschakelen)\n\nExample: ``interrupt_state = machine.disable_irq()``\n\n:return: the previous IRQ state which should be considered an opaque value\n\nThe return value should be passed to the ``enable_irq`` function to restore\ninterrupts to their original state.\"\"\"\n    ...\n\ndef enable_irq(state: Any) -> None:\n    \"\"\"Zet interruptie verzoeken opnieuw aan. (irq inschakelen)\n\nExample: ``machine.enable_irq(interrupt_state)``\n\n:param state: (staat) De waarde die is teruggestuurd van de meest recente oproep naar de ``disable_irq`` functie.\"\"\"\n    ...\n\ndef time_pulse_us(pin: MicroBitDigitalPin, pulse_level: int, timeout_us: int=1000000) -> int:\n    \"\"\"Time een puls op een pin. (tijd pulse us)\n\nExample: ``time_pulse_us(pin0, 1)``\n\nIf the current input value of the pin is different to ``pulse_level``, the\nfunction first waits until the pin input becomes equal to\n``pulse_level``, then times the duration that the pin is equal to\n``pulse_level``. If the pin is already equal to ``pulse_level`` then timing\nstarts straight away.\n\n:param pin: De pin om te gebruiken\n:param pulse_level: (puls niveau) 0 om een lage puls te tikken of 1 om een hoge puls te tikken\n:param timeout_us: Een microseconde time-out\n:return: The duration of the pulse in microseconds, or -1 for a timeout waiting for the level to match ``pulse_level``, or -2 on timeout waiting for the pulse to end\"\"\"\n    ...\n\nclass mem:\n    \"\"\"De klasse van de ``mem8``, ``mem16`` en ``mem32`` geheugenweergaven.\"\"\"\n\n    def __getitem__(self, address: int) -> int:\n        \"\"\"Toegang tot een waarde uit het geheugen.\n\n:param address: (adres) Het geheugenadres.\n:return: The value at that address as an integer.\"\"\"\n        ...\n\n    def __setitem__(self, address: int, value: int) -> None:\n        \"\"\"Stel een waarde in op het opgegeven adres.\n\n:param address: (adres) Het geheugen adres.\n:param value: (waarde) De integerwaarde die moet worden ingesteld.\"\"\"\n        ...\nmem8: mem\n\"\"\"8-bit (byte) weergave van het geheugen.\"\"\"\nmem16: mem\n\"\"\"16-bit (byte) weergave van het geheugen.\"\"\"\nmem32: mem\n\"\"\"32-bit (byte) weergave van het geheugen.\"\"\"",
    "/typeshed/stdlib/math.pyi": "",
    "/typeshed/stdlib/micropython.pyi": "",
    "/typeshed/stdlib/music.pyi": "\"\"\"Maak en speel melodie\u00ebn. (muziek)\"\"\"\nfrom typing import Optional, Tuple, Union, List\nfrom .calliope import MicroBitDigitalPin, pin0\nDADADADUM: Tuple[str, ...]\n\"\"\"Melodie: de opening naar Beethoven's 5e Symfonie in C minor.\"\"\"\nENTERTAINER: Tuple[str, ...]\n\"\"\"Melody: het openingsfragment van Scott Joplin\u2019s Ragtime classic \u201cThe Entertainer\u201d.\"\"\"\nPRELUDE: Tuple[str, ...]\n\"\"\"Melodie: de opening van de eerste prelude in C Major van J.S.Bach's 48 Preludes en Fugues.\"\"\"\nODE: Tuple[str, ...]\n\"\"\"Melodie: het thema \"Ode aan Joy\" van Beethoven zijn negende Symfonie in D-klein.\"\"\"\nNYAN: Tuple[str, ...]\n\"\"\"Melodie: het Nyan Cat thema (http://www.nyan.cat/).\n\nThe composer is unknown. This is fair use for educational porpoises (as they say in New York).\"\"\"\nRINGTONE: Tuple[str, ...]\n\"\"\"Melodie: iets dat klinkt als een beltoon van een mobiele telefoon. (beltoon)\n\nTo be used to indicate an incoming message.\n\"\"\"\nFUNK: Tuple[str, ...]\n\"\"\"Melodie: een grappige bas lijn voor geheime agenten en criminele meesterbreinen.\"\"\"\nBLUES: Tuple[str, ...]\n\"\"\"Melodie: een boogie-woogie 12-bar blues wandel bas. (Blues)\"\"\"\nBIRTHDAY: Tuple[str, ...]\n\"\"\"Melodie: \u201cHappy Birthday to You\u2026\u201d (verjaardag)\n\nFor copyright status see: http://www.bbc.co.uk/news/world-us-canada-34332853\n\"\"\"\nWEDDING: Tuple[str, ...]\n\"\"\"Melodie: het bruidskoor van de opera van Wagner \u201cLohengrin\u201d. (bruiloft)\"\"\"\nFUNERAL: Tuple[str, ...]\n\"\"\"Melody: de \u201cbegrafenismars\u201d die ook bekend staat als Fr\u00e9d\u00e9ric Chopin\u2019s Piano Sonata No. 2 in B\u266d minor, Op. 35. (begrafenis)\"\"\"\nPUNCHLINE: Tuple[str, ...]\n\"\"\"Melodie: een grappig fragment dat aangeeft dat er een grap is gemaakt. (clou)\"\"\"\nPYTHON: Tuple[str, ...]\n\"\"\"Melodie: John Philip Sousa's mars \"Liberty Bell\", ook bekend als het thema voor \"Monty Python's Flying Circus\" (waarnaar de programmeertaal Python is vernoemd).\"\"\"\nBADDY: Tuple[str, ...]\n\"\"\"Melodie: stomme filmtijdperk de binnenkomst van een boef. (boef)\"\"\"\nCHASE: Tuple[str, ...]\n\"\"\"Melodie: stille film tijdperk achtervolgings-sc\u00e8ne. (achtervolgen)\"\"\"\nBA_DING: Tuple[str, ...]\n\"\"\"Melodie: een kort signaal om aan te geven dat er iets is gebeurd.\"\"\"\nWAWAWAWAA: Tuple[str, ...]\n\"\"\"Melody: een zeer trieste trombone.\"\"\"\nJUMP_UP: Tuple[str, ...]\n\"\"\"Melody: voor gebruik in een spel om opwaartse beweging aan te geven. (spring omhoog)\"\"\"\nJUMP_DOWN: Tuple[str, ...]\n\"\"\"Melody: voor gebruik in een spel, om neerwaartse beweging aan te geven. (spring omlaag)\"\"\"\nPOWER_UP: Tuple[str, ...]\n\"\"\"Melodie: een fanfare die aantoont dat een prestatie ontgrendeld is. (opstarten)\"\"\"\nPOWER_DOWN: Tuple[str, ...]\n\"\"\"Melody: een droevige fanfare om aan te geven dat een prestatie verloren is gegaan. (afsluiten)\"\"\"\n\ndef set_tempo(ticks: int=4, bpm: int=120) -> None:\n    \"\"\"Stelt het geschatte tempo in voor het afspelen. (kies tempo)\n\nExample: ``music.set_tempo(bpm=120)``\n\n:param ticks: (tikken) Het aantal tikken in een beat.\n:param bpm: Een geheel getal dat het aantal beats per minuut bepaalt.\n\nSuggested default values allow the following useful behaviour:\n\n- music.set_tempo() \u2013 reset the tempo to default of ticks = 4, bpm = 120\n- music.set_tempo(ticks=8) \u2013 change the \u201cdefinition\u201d of a beat\n- music.set_tempo(bpm=180) \u2013 just change the tempo\n\nTo work out the length of a tick in milliseconds is very simple arithmetic:\n60000/bpm/ticks_per_beat. For the default values that\u2019s\n60000/120/4 = 125 milliseconds or 1 beat = 500 milliseconds.\"\"\"\n    ...\n\ndef get_tempo() -> Tuple[int, int]:\n    \"\"\"Haalt het huidige tempo op als een heel geheel getal: ``(ticks, bpm)``. (krijg tempo)\n\nExample: ``ticks, beats = music.get_tempo()``\n\n:return: The temp as a tuple with two integer values, the ticks then the beats per minute.\"\"\"\n    ...\n\ndef play(music: Union[str, List[str], Tuple[str, ...]], pin: Optional[MicroBitDigitalPin]=pin0, wait: bool=True, loop: bool=False) -> None:\n    \"\"\"Speelt muziek af. (afspelen)\n\nExample: ``music.play(music.NYAN)``\n\n:param music: (muziek) muziek opgegeven in `a special notation <https://microbit-micropython.readthedocs.io/en/v2-docs/music.html#musical-notation>`_\n:param pin: de uitvoer pin voor gebruik met een externe luidspreker (standaard ``pin0``), ``None`` voor geen geluid.\n:param wait: (wacht) Als ``wait`` is ingesteld op ``True``wordt deze functie geblokkeerd.\n:param loop: Als ``loop`` is ingesteld op ``True``herhaalt de melodie tot ``stop`` wordt opgeroepen of wordt de blokkerende oproep word onderbroken.\n\nMany built-in melodies are defined in this module.\"\"\"\n    ...\n\ndef pitch(frequency: int, duration: int=-1, pin: Optional[MicroBitDigitalPin]=pin0, wait: bool=True) -> None:\n    \"\"\"Speel een noot. (toonhoogte)\n\nExample: ``music.pitch(185, 1000)``\n\n:param frequency: (frequentie) Een integere frequentie\n:param duration: (Duur) Een milliseconde duur. Als negatief dan gaat het geluid door tot de volgende oproep of een oproep tot ``stop``.\n:param pin: Optionele uitvoer pin (standaard ``pin0``).\n:param wait: (wacht) Als ``wait`` is ingesteld op ``True``wordt deze functie geblokkeerd.\n\nFor example, if the frequency is set to 440 and the length to\n1000 then we hear a standard concert A for one second.\n\nYou can only play one pitch on one pin at any one time.\"\"\"\n    ...\n\ndef stop(pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"Stopt alle muziek op de ingebouwde luidspreker en elke pin die geluid uitzendt.\n\nExample: ``music.stop()``\n\n:param pin: Een optioneel argument kan worden opgegeven om een pin op te geven, bijvoorbeeld ``music.stop(pin1)``.\"\"\"\n\ndef reset() -> None:\n    \"\"\"Reset ticks, bpm, duur en octaven naar hun standaardwaarden.\n\nExample: ``music.reset()``\n\nValues:\n- ``ticks = 4``\n- ``bpm = 120``\n- ``duration = 4``\n- ``octave = 4``\"\"\"\n    ...",
    "/typeshed/stdlib/neopixel.pyi": "\"\"\"Individueel adresseerbare RGB en RGBW LED-strips.\"\"\"\nfrom .calliope import MicroBitDigitalPin\nfrom typing import Tuple\n\nclass NeoPixel:\n\n    def __init__(self, pin: MicroBitDigitalPin, n: int, bpp: int=3) -> None:\n        \"\"\"Initialiseer een nieuwe strip van neopixel LED's beheerd via een pin. (initialiseren)\n\nExample: ``np = neopixel.NeoPixel(pin0, 8)``\n\nTo support RGBW neopixels, a third argument can be passed to\n``NeoPixel`` to indicate the number of bytes per pixel (``bpp``).\nFor RGBW, this is is 4 rather than the default of 3 for RGB and GRB.\n\nEach pixel is addressed by a position (starting from 0). Neopixels are\ngiven RGB (red, green, blue) / RGBW (red, green, blue, white) values\nbetween 0-255 as a tuple. For example, in RGB, ``(255,255,255)`` is\nwhite. In RGBW, ``(255,255,255,0)`` or ``(0,0,0,255)`` is white.\n\nSee `the online docs <https://microbit-micropython.readthedocs.io/en/v2-docs/neopixel.html>`_ for warnings and other advice.\n\n:param pin: De pin regelt de neopixelstrook.\n:param n: Het aantal neopixels in de strip.\n:param bpp: Bytes per pixel. Voor micro:bit V2 RGBW neopixel ondersteuning, geef 4 door in plaats van de standaard 3 voor RGB en GRB.\"\"\"\n        ...\n\n    def clear(self) -> None:\n        \"\"\"Verwijder alle pixels. (wissen)\n\nExample: ``np.clear()``\"\"\"\n        ...\n\n    def show(self) -> None:\n        \"\"\"Toon de pixels. (toon)\n\nExample: ``np.show()``\n\nMust be called for any updates to become visible.\"\"\"\n        ...\n\n    def write(self) -> None:\n        \"\"\"Toon de pixels (alleen micro:bit V2). (schrijven)\n\nExample: ``np.write()``\n\nMust be called for any updates to become visible.\n\nEquivalent to ``show``.\"\"\"\n        ...\n\n    def fill(self, colour: Tuple[int, ...]) -> None:\n        \"\"\"Kleur alle pixels een bepaalde RGB/RGBW waarde. (opvullen)\n\nExample: ``np.fill((0, 0, 255))``\n\n:param colour: (kleur) Een tuple van dezelfde lengte als het aantal bytes per pixel (bpp).\n\nUse in conjunction with ``show()`` to update the neopixels.\"\"\"\n        ...\n\n    def __setitem__(self, key: int, value: Tuple[int, ...]) -> None:\n        \"\"\"Stel een pixelkleur in.\n\nExample: ``np[0] = (255, 0, 0)``\n\n:param key: (sleutel) Het pixelnummer.\n:param value: (waarde) De kleur.\"\"\"\n\n    def __getitem__(self, key: int) -> Tuple[int, ...]:\n        \"\"\"Krijg een pixelkleur.\n\nExample: ``r, g, b = np[0]``\n\n:param key: (sleutel) Het pixelnummer.\n:return: The colour tuple.\"\"\"\n\n    def __len__(self) -> int:\n        \"\"\"Haal de lengte op van deze pixelstrip.\n\nExample: ``len(np)``\"\"\"",
    "/typeshed/stdlib/os.pyi": "",
    "/typeshed/stdlib/power.pyi": "\"\"\"Manage the power modes of the micro:bit (V2 only).\n\"\"\"\n\nfrom microbit import MicroBitDigitalPin, Button\nfrom typing import Optional, Tuple, Union\n\ndef off() -> None:\n    \"\"\"Power down the board to the lowest possible power mode.\n\n    Example: ``power.off()``\n\n    This is the equivalent to pressing the reset button for a few seconds,\n    to set the board in \"Off mode\".\n\n    The micro:bit will only wake up if the reset button is pressed or,\n    if on battery power, when a USB cable is connected.\n\n    When the board wakes up it will start for a reset state, so your program\n    will start running from the beginning.\n    \"\"\"\n    ...\n\ndef deep_sleep(\n    ms: Optional[int] = None,\n    wake_on: Optional[\n        Union[MicroBitDigitalPin, Button] | Tuple[MicroBitDigitalPin | Button, ...]\n    ] = None,\n    run_every: bool = True,\n) -> None:\n    \"\"\"Set the micro:bit into a low power mode where it can wake up and continue operation.\n\n    Example: ``power.deep_sleep(wake_on=(button_a, button_b))``\n\n    The program state is preserved and when it wakes up it will resume\n    operation where it left off.\n\n    Deep Sleep mode will consume more battery power than Off mode.\n\n    The wake up sources are configured via arguments.\n\n    The board will always wake up when receiving UART data, when the reset\n    button is pressed (which resets the board) or, in battery power,\n    when the USB cable is inserted.\n\n    When the ``run_every`` parameter is set to ``True`` (the default), any\n    function scheduled with ``run_every`` will momentarily wake up the board\n    to run and when it finishes it will go back to sleep.\n\n    :param ms: A time in milliseconds to wait before it wakes up.\n    :param wake_on: A single instance or a tuple of pins and/or buttons to wake up the board, e.g. ``deep_sleep(wake_on=button_a)`` or ``deep_sleep(wake_on=(pin0, pin2, button_b))``.\n    :param run_every: A boolean to configure if the functions scheduled with ``microbit.run_every`` will continue to run while it sleeps.\n    \"\"\"\n    ...\n",
    "/typeshed/stdlib/radio.pyi": "",
    "/typeshed/stdlib/random.pyi": "",
    "/typeshed/stdlib/speech.pyi": "\"\"\"Laat de micro:bit praten, zingen en andere spraak maken, zoals geluid. (spraak)\"\"\"\nfrom typing import Optional\nfrom .calliope import MicroBitDigitalPin, pin0\n\ndef translate(words: str) -> str:\n    \"\"\"Vertaal Engelse woorden naar fonemen. (vertalen)\n\nExample: ``speech.translate('hello world')``\n\n:param words: (woorden) Een tekenreeks Engelse woorden.\n:return: A string containing a best guess at the appropriate phonemes to pronounce.\nThe output is generated from this `text to phoneme translation table <https://github.com/s-macke/SAM/wiki/Text-to-phoneme-translation-table>`_.\n\nThis function should be used to generate a first approximation of phonemes\nthat can be further hand-edited to improve accuracy, inflection and\nemphasis.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef pronounce(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: Optional[MicroBitDigitalPin]=pin0) -> None:\n    \"\"\"Uitspraak phonemes. (uitspreken)\n\nExample: ``speech.pronounce(' /HEHLOW WERLD')``\n\n:param phonemes: (fonemen) De reeks fonemen om uit te spreken\n:param pitch: (toonhoogte) Een nummer dat de toonhoogte van de stem weergeeft\n:param speed: (snelheid) Een nummer dat de snelheid van de stem vertegenwoordigt\n:param mouth: (mond) Een nummer dat de mond van de stem weergeeft\n:param throat: (keel) Een nummer dat de keel van de stem weergeeft\n:param pin: Een optioneel argument om de uitvoer pin op te geven, kan worden gebruikt om de standaard van ``pin0``te overschrijven. Als we geen geluid willen afspelen, kunnen we ``pin=None`` gebruiken. Alleen voor micro:bit V2.\n\nOverride the optional pitch, speed, mouth and throat settings to change the\ntimbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef say(words: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Zeg Engelse woorden. (zeg)\n\nExample: ``speech.say('hello world')``\n\n:param words: (woorden) De tekenreeks van woorden om te zeggen.\n:param pitch: (toonhoogte) Een nummer dat de toonhoogte van de stem weergeeft\n:param speed: (snelheid) Een nummer dat de snelheid van de stem vertegenwoordigt\n:param mouth: (mond) Een nummer dat de mond van de stem weergeeft\n:param throat: (keel) Een nummer dat de keel van de stem weergeeft\n:param pin: Een optioneel argument om de uitvoer pin op te geven, kan worden gebruikt om de standaard van ``pin0``te overschrijven. Als we geen geluid willen afspelen, kunnen we ``pin=None`` gebruiken. Alleen voor micro:bit V2.\n\nThe result is semi-accurate for English. Override the optional pitch, speed,\nmouth and throat settings to change the timbre (quality) of the voice.\n\nThis is a short-hand equivalent of:\n``speech.pronounce(speech.translate(words))``\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...\n\ndef sing(phonemes: str, pitch: int=64, speed: int=72, mouth: int=128, throat: int=128, pin: MicroBitDigitalPin=pin0) -> None:\n    \"\"\"Zing fonemen. (zing)\n\nExample: ``speech.sing(' /HEHLOW WERLD')``\n\n:param phonemes: (fonemen) De tekenreeks van woorden om te zingen.\n:param pitch: (toonhoogte) Een nummer dat de toonhoogte van de stem weergeeft\n:param speed: (snelheid) Een nummer dat de snelheid van de stem vertegenwoordigt\n:param mouth: (mond) Een nummer dat de mond van de stem weergeeft\n:param throat: (keel) Een nummer dat de keel van de stem weergeeft\n:param pin: Een optioneel argument om de uitvoer pin op te geven, kan worden gebruikt om de standaard van ``pin0``te overschrijven. Als we geen geluid willen afspelen, kunnen we ``pin=None`` gebruiken. Alleen voor micro:bit V2.\n\nOverride the optional pitch, speed, mouth and throat settings to change\nthe timbre (quality) of the voice.\n\nSee `the online documentation <https://microbit-micropython.readthedocs.io/en/v2-docs/speech.html>`_ for detailed information.\"\"\"\n    ...",
    "/typeshed/stdlib/struct.pyi": "",
    "/typeshed/stdlib/sys.pyi": "",
    "/typeshed/stdlib/this.pyi": "",
    "/typeshed/stdlib/time.pyi": "",
    "/typeshed/stdlib/types.pyi": "",
    "/typeshed/stdlib/typing.pyi": "",
    "/typeshed/stdlib/typing_extensions.pyi": "",
    "/typeshed/stdlib/uarray.pyi": "",
    "/typeshed/stdlib/ucollections.pyi": "",
    "/typeshed/stdlib/uerrno.pyi": "",
    "/typeshed/stdlib/urandom.pyi": "",
    "/typeshed/stdlib/ustruct.pyi": "",
    "/typeshed/stdlib/usys.pyi": "",
    "/typeshed/stdlib/utime.pyi": "",
    "/typeshed/stdlib/calliopemini/__init__.pyi": "",
    "/typeshed/stdlib/calliopemini/accelerometer.pyi": "",
    "/typeshed/stdlib/calliopemini/audio.pyi": "",
    "/typeshed/stdlib/calliopemini/compass.pyi": "",
    "/typeshed/stdlib/calliopemini/display.pyi": "",
    "/typeshed/stdlib/calliopemini/i2c.pyi": "",
    "/typeshed/stdlib/calliopemini/microphone.pyi": "",
    "/typeshed/stdlib/calliopemini/speaker.pyi": "",
    "/typeshed/stdlib/calliopemini/spi.pyi": "",
    "/typeshed/stdlib/calliopemini/uart.pyi": "",
    "/typeshed/stdlib/_typeshed/__init__.pyi": "",
    "/typeshed/stdlib/collections/__init__.pyi": "",
    "/src/pyrightconfig.json": "{ \n  \"pythonVersion\": \"3.6\",\n  \"pythonPlatform\": \"Linux\",\n  \"typeCheckingMode\": \"basic\",\n  \"typeshedPath\": \"/typeshed/\",\n  \"reportMissingModuleSource\": false,\n  \"reportWildcardImportFromLibrary\": false,\n  \"verboseOutput\": true\n }\n"
  }
}